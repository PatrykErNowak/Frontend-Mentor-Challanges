"use strict";const solutions=[{id:1,title:"Three column card",type:"Component",level:"newbie",technologies:[{name:"html",icon:"icon-html5"},{name:"css",icon:"icon-css3"}],img:{src:"./img/Photos of Challenges/01 newbie/3 column card preview.jpg",alt:"3 column card preview solution screenshot"},links:{live:"../../Challenges/01%20Newbie/3-column-preview-card-component/",repo:"https://github.com/PatrykErNowak/Frontend-Mentor-Challenges/tree/main/Challenges/01%20Newbie/3-column-preview-card-component"}}],createSolutionElement=function(e){var{id:e,title:n,type:o,technologies:i,img:t,links:l}=e,s=document.createElement("li"),t=`            
  <article class="solution" data-id="${e}">
    <img
      src="${t.src}"
      alt="${t.alt}"
      class="solution__img"
    />
    <div class="solution__content">
      <h4 class="solution__title">${n}</h4>
      <p class="solution__type">${o}</p>
      <ul class="solution__tech-list" aria-label="Technologies">
          ${e=i,e.map(e=>`        
    <li class="solution__tech-item">
      <svg class="icon" aria-label="${e.name}" role="img">
        <use
          xlink:href="./img/tech-icons/sprite.svg#${e.icon}"
        ></use>
      </svg>
    </li>`).join("\n")}
      </ul>
      <div class="solution__btns">
        <a
          href="${l.live}"
          class="solution__btn btn btn--secondary"
          >Live
          <ion-icon class="btn-icon" name="open-outline"></ion-icon
        ></a>
        <a
          href="${l.repo}"
          class="solution__btn btn btn--primary"
          >Repo
          <ion-icon class="btn-icon" name="logo-github"></ion-icon
        ></a>
      </div>
    </div>
  </article>
`;return s.insertAdjacentHTML("afterbegin",t),s},listElement=document.querySelector(".js-solutions-list");solutions.forEach(e=>{e=createSolutionElement(e);listElement.append(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjEtZGF0YS5qcyIsIjItc29sdXRpb24tY29tcG9uZW50LmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJzb2x1dGlvbnMiLCJpZCIsInRpdGxlIiwidHlwZSIsImxldmVsIiwidGVjaG5vbG9naWVzIiwibmFtZSIsImljb24iLCJpbWciLCJzcmMiLCJhbHQiLCJsaW5rcyIsImxpdmUiLCJyZXBvIiwiY3JlYXRlU29sdXRpb25FbGVtZW50Iiwic29sdXRpb24iLCJsaSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImh0bWwiLCJ0ZWNoIiwibWFwIiwidCIsImpvaW4iLCJpbnNlcnRBZGphY2VudEhUTUwiLCJsaXN0RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmb3JFYWNoIiwicyIsImFwcGVuZCJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBQUEsVUFBQSxDQUNBLENBQ0FDLEdBQUEsRUFDQUMsTUFBQSxvQkFDQUMsS0FBQSxZQUNBQyxNQUFBLFNBQ0FDLGFBQUEsQ0FDQSxDQUFBQyxLQUFBLE9BQUFDLEtBQUEsWUFBQSxFQUNBLENBQUFELEtBQUEsTUFBQUMsS0FBQSxXQUFBLEdBRUFDLElBQUEsQ0FDQUMsSUFBQSxpRUFDQUMsSUFBQSwyQ0FDQSxFQUNBQyxNQUFBLENBQ0FDLEtBQUEsZ0VBQ0FDLEtBQUEsOEhBQ0EsQ0FDQSxHQ2xCQUMsc0JBQUEsU0FBQUMsR0FDQSxHQUFBLENBQUFkLEdBQUFBLEVBQUFDLE1BQUFBLEVBQUFDLEtBQUFBLEVBQUFFLGFBQUFBLEVBQUFHLElBQUFBLEVBQUFHLE1BQUFBLENBQUEsRUFBQUksRUFDQUMsRUFBQUMsU0FBQUMsY0FBQSxJQUFBLEVBbUJBQzt1Q0FDQWxCOzthQUVBTyxFQUFBQzthQUNBRCxFQUFBRTs7OztvQ0FJQVI7a0NBQ0FDOztZQTFCQWlCLEVBNEJBZixFQTNCQWUsRUFDQUMsSUFDQUM7O3NDQUVBQSxFQUFBaEI7O29EQUVBZ0IsRUFBQWY7OztVQUlBLEVBQ0FnQixLQUFBLElBQUE7Ozs7a0JBb0JBWixFQUFBQzs7Ozs7O2tCQU1BRCxFQUFBRTs7Ozs7Ozs7RUFZQSxPQUZBRyxFQUFBUSxtQkFBQSxhQUFBTCxDQUFBLEVBRUFILENBQ0EsRUN2REFTLFlBQUFSLFNBQUFTLGNBQUEsb0JBQUEsRUFFQTFCLFVBQUEyQixRQUFBQyxJQUNBYixFQUFBRCxzQkFBQWMsQ0FBQSxFQUNBSCxZQUFBSSxPQUFBZCxDQUFBLENBQ0EsQ0FBQSIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc29sdXRpb25zID0gW1xyXG4gIHtcclxuICAgIGlkOiAxLFxyXG4gICAgdGl0bGU6ICdUaHJlZSBjb2x1bW4gY2FyZCcsXHJcbiAgICB0eXBlOiAnQ29tcG9uZW50JyxcclxuICAgIGxldmVsOiAnbmV3YmllJyxcclxuICAgIHRlY2hub2xvZ2llczogW1xyXG4gICAgICB7IG5hbWU6ICdodG1sJywgaWNvbjogJ2ljb24taHRtbDUnIH0sXHJcbiAgICAgIHsgbmFtZTogJ2NzcycsIGljb246ICdpY29uLWNzczMnIH0sXHJcbiAgICBdLFxyXG4gICAgaW1nOiB7XHJcbiAgICAgIHNyYzogJy4vaW1nL1Bob3RvcyBvZiBDaGFsbGVuZ2VzLzAxIG5ld2JpZS8zIGNvbHVtbiBjYXJkIHByZXZpZXcuanBnJyxcclxuICAgICAgYWx0OiAnMyBjb2x1bW4gY2FyZCBwcmV2aWV3IHNvbHV0aW9uIHNjcmVlbnNob3QnLFxyXG4gICAgfSxcclxuICAgIGxpbmtzOiB7XHJcbiAgICAgIGxpdmU6ICcuLi8uLi9DaGFsbGVuZ2VzLzAxJTIwTmV3YmllLzMtY29sdW1uLXByZXZpZXctY2FyZC1jb21wb25lbnQvJyxcclxuICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9QYXRyeWtFck5vd2FrL0Zyb250ZW5kLU1lbnRvci1DaGFsbGVuZ2VzL3RyZWUvbWFpbi9DaGFsbGVuZ2VzLzAxJTIwTmV3YmllLzMtY29sdW1uLXByZXZpZXctY2FyZC1jb21wb25lbnQnLFxyXG4gICAgfSxcclxuICB9LFxyXG5dO1xyXG4iLCJjb25zdCBjcmVhdGVTb2x1dGlvbkVsZW1lbnQgPSBmdW5jdGlvbiAoc29sdXRpb24pIHtcclxuICBjb25zdCB7IGlkLCB0aXRsZSwgdHlwZSwgdGVjaG5vbG9naWVzLCBpbWcsIGxpbmtzIH0gPSBzb2x1dGlvbjtcclxuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcblxyXG4gIGNvbnN0IGNyZWF0ZVRlY2hJdGVtcyA9IGZ1bmN0aW9uICh0ZWNoKSB7XHJcbiAgICBjb25zdCB0ZWNoSXRlbXMgPSB0ZWNoXHJcbiAgICAgIC5tYXAoXHJcbiAgICAgICAgKHQpID0+IGAgICAgICAgIFxyXG4gICAgPGxpIGNsYXNzPVwic29sdXRpb25fX3RlY2gtaXRlbVwiPlxyXG4gICAgICA8c3ZnIGNsYXNzPVwiaWNvblwiIGFyaWEtbGFiZWw9XCIke3QubmFtZX1cIiByb2xlPVwiaW1nXCI+XHJcbiAgICAgICAgPHVzZVxyXG4gICAgICAgICAgeGxpbms6aHJlZj1cIi4vaW1nL3RlY2gtaWNvbnMvc3ByaXRlLnN2ZyMke3QuaWNvbn1cIlxyXG4gICAgICAgID48L3VzZT5cclxuICAgICAgPC9zdmc+XHJcbiAgICA8L2xpPmAsXHJcbiAgICAgIClcclxuICAgICAgLmpvaW4oJ1xcbicpO1xyXG5cclxuICAgIHJldHVybiB0ZWNoSXRlbXM7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaHRtbCA9IGAgICAgICAgICAgICBcclxuICA8YXJ0aWNsZSBjbGFzcz1cInNvbHV0aW9uXCIgZGF0YS1pZD1cIiR7aWR9XCI+XHJcbiAgICA8aW1nXHJcbiAgICAgIHNyYz1cIiR7aW1nLnNyY31cIlxyXG4gICAgICBhbHQ9XCIke2ltZy5hbHR9XCJcclxuICAgICAgY2xhc3M9XCJzb2x1dGlvbl9faW1nXCJcclxuICAgIC8+XHJcbiAgICA8ZGl2IGNsYXNzPVwic29sdXRpb25fX2NvbnRlbnRcIj5cclxuICAgICAgPGg0IGNsYXNzPVwic29sdXRpb25fX3RpdGxlXCI+JHt0aXRsZX08L2g0PlxyXG4gICAgICA8cCBjbGFzcz1cInNvbHV0aW9uX190eXBlXCI+JHt0eXBlfTwvcD5cclxuICAgICAgPHVsIGNsYXNzPVwic29sdXRpb25fX3RlY2gtbGlzdFwiIGFyaWEtbGFiZWw9XCJUZWNobm9sb2dpZXNcIj5cclxuICAgICAgICAgICR7Y3JlYXRlVGVjaEl0ZW1zKHRlY2hub2xvZ2llcyl9XHJcbiAgICAgIDwvdWw+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzb2x1dGlvbl9fYnRuc1wiPlxyXG4gICAgICAgIDxhXHJcbiAgICAgICAgICBocmVmPVwiJHtsaW5rcy5saXZlfVwiXHJcbiAgICAgICAgICBjbGFzcz1cInNvbHV0aW9uX19idG4gYnRuIGJ0bi0tc2Vjb25kYXJ5XCJcclxuICAgICAgICAgID5MaXZlXHJcbiAgICAgICAgICA8aW9uLWljb24gY2xhc3M9XCJidG4taWNvblwiIG5hbWU9XCJvcGVuLW91dGxpbmVcIj48L2lvbi1pY29uXHJcbiAgICAgICAgPjwvYT5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgaHJlZj1cIiR7bGlua3MucmVwb31cIlxyXG4gICAgICAgICAgY2xhc3M9XCJzb2x1dGlvbl9fYnRuIGJ0biBidG4tLXByaW1hcnlcIlxyXG4gICAgICAgICAgPlJlcG9cclxuICAgICAgICAgIDxpb24taWNvbiBjbGFzcz1cImJ0bi1pY29uXCIgbmFtZT1cImxvZ28tZ2l0aHViXCI+PC9pb24taWNvblxyXG4gICAgICAgID48L2E+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9hcnRpY2xlPlxyXG5gO1xyXG5cclxuICBsaS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sKTtcclxuXHJcbiAgcmV0dXJuIGxpO1xyXG59O1xyXG4iLCJjb25zdCBsaXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zb2x1dGlvbnMtbGlzdCcpO1xyXG5cclxuc29sdXRpb25zLmZvckVhY2goKHMpID0+IHtcclxuICBjb25zdCBzb2x1dGlvbiA9IGNyZWF0ZVNvbHV0aW9uRWxlbWVudChzKTtcclxuICBsaXN0RWxlbWVudC5hcHBlbmQoc29sdXRpb24pO1xyXG59KTtcclxuIl19
